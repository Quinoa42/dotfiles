#!/usr/bin/env python
# -*- coding: utf-8 -*-
#  Download a directory from a standard apache ftp server
#  Copyright Â© 2018 quinoa42
#
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
#  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import argparse
import logging
import os
import os.path as op
import sys
import time
from os import makedirs
from urllib.parse import urljoin

import requests
from bs4 import BeautifulSoup


def download(url, directory):
    """Download all files under this url.

    """
    time.sleep(0.5)
    r = requests.get(url)
    r.raise_for_status()
    b = BeautifulSoup(r.content, 'lxml')

    files = [f.find(href=True)['href'] for f in b.find_all('tr')[3:-1]]
    for a_file in files:
        _url = urljoin(url, a_file)
        dir_path = op.join(directory, a_file)
        if (a_file[-1] == '/'):
            os.mkdir(dir_path)
            logging.info("maked dir %s", dir_path)
            download(_url, dir_path)
        else:
            req = requests.get(_url)
            req.raise_for_status()
            with open(dir_path, 'w') as f:
                f.write(req.text)
            logging.info("written %s", dir_path)


def parse_args(argv):
    parser = argparse.ArgumentParser(
        description="Download files from the given apache server",
        allow_abbrev=False
    )
    parser.add_argument(
        "url",
        metavar="URL",
        help="the url to download from",
        type=str,
    )
    parser.add_argument(
        "-o",
        "--path",
        metavar="DIR",
        help="the directory where images will be downloaded to",
        type=str
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_const",
        const=1,
        default=0,
        dest="verbosity"
    )
    args = vars(parser.parse_args(argv))

    return args


def main():
    args = parse_args(sys.argv[1:])
    if args['verbosity'] == 1:
        logging.basicConfig(level=logging.INFO)
    dst = (
        args['path']
        if args['path'] is not None else args['url'].split('/')[-2]
    )
    if not op.exists(dst):
        makedirs(dst)

    download(args['url'], dst)


if __name__ == "__main__":
    main()
